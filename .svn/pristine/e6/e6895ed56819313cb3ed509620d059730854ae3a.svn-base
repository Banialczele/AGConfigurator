//-----------------------------------------------------------------------------
// return: true if is OK, false if 
function isSystemOk(system)
{
	console.log(system.supplyType);
	console.table(system.bus);
	return (analiseSystem(system) != null);
}

//-----------------------------------------------------------------------------
// return: found obj from obj table matches typeVal
function getObjByType(table, typeVal)
{
	return table.find(table => table.type == typeVal);
}

//-----------------------------------------------------------------------------
// return: device current [A] or null if deviceSupplyVoltage_V is lower than
// devices minVoltage_V
function getDeviceCurrent(device, deviceSupplyVoltage_V)
{
	let current_A = null;
	if (deviceSupplyVoltage_V >= device.minVoltage_V)
	{
		current_A = device.current_A;
		current_A = current_A + (device.power_W / deviceSupplyVoltage_V);
	}
	return current_A;
}

//-----------------------------------------------------------------------------
// return: NCN
function getBusSectionVoltageDrop_V(busSection, wireCurrent_A)
{
	let cable = getObjByType(Cables, busSection.cableType);
	let singleWireRes_Ohm = cable.resistivity_OhmPerMeter * busSection.cableLen_m;
	return 2 * singleWireRes_Ohm * wireCurrent_A;
}

//-----------------------------------------------------------------------------
// return: NCN 
function makeEleStatusObj()
{
		let eleStatus = {
		inputVoltage_V: 0,		
		inputCurrent_A: 0,
		deviceSupplyVoltage_V: 0,
		isDeviceGoodVoltage: true
	};
	return eleStatus;
}

//-----------------------------------------------------------------------------
// return:	ele. status if calculations was possible
// 			null - idf error ocured
//								to prev. section - bus begin direction
// thisSection.inputVoltage_V ->		|
// thisSection.inputCurrent_A ->		|
//									   | |
// thisSection.cableR	->			   | |
//									   | |   
//										|
//										|      |----------------------|
// thisSection.deviceSupplyVoltage_V ->	*------| thisSection.Device	  |
//										|      |					  |
//										|   ^  |----------------------|
//										|	|
//										|   thisSection.deviceSupplyCurrent
// nextSection.inputCurrent_A ->		|
//										|
//								to next section - bus end direction
//
function getBusSectionEleStatus(busSection, nextSectionEleStatus)
{
	let eleStatus = null;
	
	if (nextSectionEleStatus != null)
	{
		let device = getObjByType(Devices, busSection.deviceType);
		if (device != undefined)
		{
			eleStatus = makeEleStatusObj();
			eleStatus.deviceSupplyVoltage_V = nextSectionEleStatus.inputVoltage_V;
			let deviceSupplyCurrent_A = getDeviceCurrent(device, eleStatus.deviceSupplyVoltage_V);
			if ((deviceSupplyCurrent_A != null) && (nextSectionEleStatus.isDeviceGoodVoltage == true))
			{
				eleStatus.isDeviceGoodVoltage = true;
				eleStatus.inputCurrent_A = nextSectionEleStatus.inputCurrent_A + deviceSupplyCurrent_A;
				let vDrop_V = getBusSectionVoltageDrop_V(busSection, eleStatus.inputCurrent_A);
				eleStatus.inputVoltage_V = nextSectionEleStatus.inputVoltage_V + vDrop_V;
			}
			else
			{
				eleStatus.isDeviceGoodVoltage = false;	
			}
		}
	}
	else
	{
		eleStatus = null;
	}
	
	return eleStatus;
}

//-----------------------------------------------------------------------------
// return: bus stat if calculation was possible, null if not
function getBusEleStatus(allBusSection, initVoltage)
{
	let setcQty = allBusSection.length;
	
	let eleStatus = makeEleStatusObj();
	eleStatus.inputVoltage_V = initVoltage;

	for (i = setcQty - 1; i >= 0; i--)
	{
		eleStatus = getBusSectionEleStatus(allBusSection[i], eleStatus);
		allBusSection[i].eleStatus = copyObj(eleStatus);
	}
	
	let stat = {
		requiredSupplyVoltage_V: eleStatus.inputVoltage_V,
		currentConsumption_A: eleStatus.inputCurrent_A,
		isEveryDeviceGoodVoltage: eleStatus.isDeviceGoodVoltage,
		powerConsumption_W: eleStatus.inputCurrent_A * eleStatus.inputVoltage_V
	};
	if (eleStatus == null) stat = null;
	return stat;
}

//-----------------------------------------------------------------------------
// return: NCN
function copyObj(obj)
{
	return JSON.parse(JSON.stringify(obj));
}

//-----------------------------------------------------------------------------
// return: NCN
function analiseSystem(system)
{
	let res = null;
	let bus = system.bus;
	let lastSect = bus[bus.length - 1];
	let supplyVoltage_V = getObjByType(PowerSupplies, system.supplyType).supplyVoltage_V;
	let busStat;
	
	const voltageStep_V = 0.1;
	
	let lastDevice = getObjByType(Devices, lastSect.deviceType);
	if (lastDevice != undefined)
	{
		let busEndVoltage_V = lastDevice.minVoltage_V;
		let firsStepbusEndVoltage_V = busEndVoltage_V;
		do
		{
			busStat = getBusEleStatus(bus, busEndVoltage_V);
			if (busStat.requiredSupplyVoltage_V > supplyVoltage_V) break;
			busEndVoltage_V += voltageStep_V;
		}
		while(busEndVoltage_V < supplyVoltage_V);

		if (busStat != null)
		{
			// make one extra iteration to make input bus voltage below supplyVoltage_V
			// while loop above terminates when this voltage is above limit, so we have to make previous
			// iteration once again, unless it was not firts iteration
			busEndVoltage_V -= voltageStep_V;
			if (busEndVoltage_V > firsStepbusEndVoltage_V) 
			{
				busStat = getBusEleStatus(bus, busEndVoltage_V);
				res = busStat;
			}
		}
	}	
	
	return res;	
}
