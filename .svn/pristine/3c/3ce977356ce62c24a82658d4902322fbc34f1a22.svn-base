const powerSupplies = PowerSupplies.map(powerSupply => ({ ...powerSupply }));

let systemData = {
	supplyType: "24V z podtrzymaniem",
	bus: [{
		cableType: "2 x 1 mm2",
		cableLen_m: 15,
		deviceType: "Teta EcoWent"
	}]
};

let lang = 'EN';

const usedText = {
	konfigurator: {
		pl: 'Konfigurator Systemów Teta',
		en: 'Teta System Configurator'
	},
	systemNiepoprawny: {
		pl: 'System: N/A',
		en: 'System: N/A'
	},
	zapotrzebowanieMocy: {
		pl: 'Zapotrzebowanie na moc przez elementy magistrali: ',
		en: 'System power demand: '
	},
	zaznaczWszystkie: {
		pl: 'Zaznacz wszystkie',
		en: 'Select all'
	},
	odznaczWszystkie: {
		pl: 'Odznacz wszystkie',
		en: 'Deselect all'
	},
	dobierzKabel: {
		pl: 'Dobierz kabel',
		en: 'Adjust cable'
	},
	zachowajSystem: {
		pl: 'Zachowaj system',
		en: 'Save system'
	},
	wczytajSystem: {
		pl: 'Wczytaj system',
		en: 'Load system'
	},
	usunSegment: {
		pl: 'Usunieto segment',
		en: 'Deleted segment'
	},
	usunJedynySegment: {
		pl: 'Nie można usunąć jedynego segmentu',
		en: 'Cannot delete only segment'
	}
}

window.addEventListener('load', () => {
	checkLang();
	const installationContainer = document.createElement('div');
	installationContainer.className = `installationContainer`;
	document.querySelector('h2').innerText = chooseText(usedText.konfigurator);
	const systemStatus = document.querySelector('.systemStatus');
	const systemContainer = document.querySelector('.powerManagementInstallationContainer');
	if (systemStatus && systemContainer) {
		systemContainer.appendChild(installationContainer);

		select(powerSupplies, 'powerManagementInstallationContainer', `powerSupply`);
		picture('psu', `psuImageContainer`, `powerSupplyContainer`, `imagePSU`);
		handleDragAndDrop();
		getSystem(setSystem(systemData));
		handleButtonEvents();
		handleCheckboxes();
		setupBusImage();
		handlePSU();

		checkboxButtons(systemContainer);
		assignNewIdToCheckbox();
		const targetNode = document.querySelector(".installationContainer");

		const config = {
			childList: true,
			subtree: false,
			attributes: false,
			characterData: false
		};

		const observer = new MutationObserver(handleDOMChange);
		observer.observe(targetNode, config);

		fileButtons();
		systemInformation();
	}
});

function segmentEvents(segment) {
	const segmentDeviceSelect = segment.querySelector('.deviceSelect');
	segmentDeviceSelect.addEventListener('change', (e) => handleInputAndSelectChange(e, segment));

	const segmentCableSelect = segment.querySelector('.cableSelect');
	segmentCableSelect.addEventListener('change', (e) => handleInputAndSelectChange(e, segment));

	const cableLength = segment.querySelector(`.cableLength`);
	cableLength.addEventListener('change', e => handleInputAndSelectChange(e, segment));

	const amountToCopy = segment.querySelector(`.deviceQuantity`);

	amountToCopy.addEventListener('keyup', e => e.key === 'Enter' || e.keyCode === 13 ? handleCopyNthTimes(e, e.target.value) : '');
}

function getSystem(system) {
	system.bus.forEach((item, i) => {
		generateSegments(item, i);
		initializeSegmentData(system, i);
	});
	const segments = document.querySelectorAll('.installationSegment');
	segments.forEach(segment => segmentEvents(segment));
}

function setSystem(system) {
	systemData = system;
	return systemData;
}

function systemInformation() {
	const installationContainer = document.querySelector('.powerManagementInstallationContainer');
	const sysOk = isSystemOk(setSystem(systemData));
	const info = document.getElementById('systemStatusText');
	if (sysOk) {
		installationContainer.classList.add('sysOk');
		installationContainer.classList.remove('sysWrong');
		info.src = './Icons/sysOk.svg';
		const powerConsumption = document.getElementById('powerConsumption');
		powerConsumption.innerText = `${chooseText(usedText.zapotrzebowanieMocy)} ${Math.ceil(analiseSystem(setSystem(systemData)).powerConsumption_W)} W`;
	} else {
		installationContainer.classList.add('sysWrong');
		installationContainer.classList.remove('sysOk');
		info.src = './Icons/sysWrong.svg';
		const powerConsumption = document.getElementById('powerConsumption');
		powerConsumption.innerText = `${chooseText(usedText.zapotrzebowanieMocy)} N/A`;
	}
}

function assignNewIdToCheckbox() {
	const checkboxIdArr = document.querySelectorAll('.segmentIterator');
	checkboxIdArr.forEach((item, index) => {
		checkboxIdArr[index].innerHTML = `${index + 1}. `;
	});
}

function generateSegments(item, index) {
	Cable.cableComponent(item, index);
	Device.deviceComponent(item, index);
	Device.deviceButtons(index);
}

function initializeSegmentData(system, i) {
	const powerSupply = document.querySelector('.powerSupply');
	powerSupply.value = systemData.supplyType;
	const segment = document.querySelector(`.segmentContainer${i}`);
	segment.querySelector('.cableSelect').value = system.bus[i].cableType;
	segment.querySelector('input[name="cableInput"]').value = system.bus[i].cableLen_m;
	segment.querySelector('.deviceSelect').value = system.bus[i].deviceType;
	chooseImg(segment.querySelector('.deviceimage'), system.bus[i].deviceType, 'deviceImage');
}

function selectDeselectCheckboxes() {
	const checkboxes = document.querySelectorAll('input[name=cableType]');
	const selectAllCheckboxes = document.getElementById('checkCheckboxes');
	const selectAllCheckboxesLabel = document.getElementById('checkCheckboxesLabel');

	for (let checkbox of checkboxes) {
		selectAllCheckboxes.checked ? checkbox.checked = true : checkbox.checked = false;
	}
	selectAllCheckboxes.checked
		? selectAllCheckboxesLabel.innerText = chooseText(usedText.odznaczWszystkie)
		: selectAllCheckboxesLabel.innerText = chooseText(usedText.zaznaczWszystkie);

}

function matchCablesToSystem() {
	const installationContainer = document.querySelector('.installationContainer');
	while (installationContainer.firstChild) {
		installationContainer.removeChild(installationContainer.firstChild);
	}
	getSystem(setSystem(matchSystemCables(systemData)));
}


function selectedCheckboxes(segmentList) {
	return Array.from(segmentList).filter(segment => {
		const checkbox = segment.querySelector('input[type="checkbox"]');
		return checkbox.checked ? segment : null;
	});
}

function setupBusImage() {
	const segments = document.querySelectorAll('.installationSegment');
	const imageElements = document.querySelectorAll('.cableimage');
	segments.forEach((segment, i) => {
		const selectedOptionIndex = segment.querySelector('.deviceSelect').selectedIndex;
		const isDeviceBig = segment.querySelector('.deviceSelect').options[selectedOptionIndex].dataset.isbig || 'false';
		if (isDeviceBig === "true") {
			segment.classList.add('segmentBig');
		} else if (isDeviceBig !== "true" && segment.classList.contains('segmentBig')) {
			segment.classList.remove('segmentBig');
		}
		if (!(segments[i + 1])) {
			isDeviceBig === 'false' ? chooseImg(imageElements[i], "busEndShort", 'busImage') : chooseImg(imageElements[i], "busEndLong", 'busImage');
		} else {
			isDeviceBig === 'false' ? chooseImg(imageElements[i], "busShort", 'busImage') : chooseImg(imageElements[i], "busLong", 'busImage');
		}
	});
}

function checkLang() {
	let HREF = window.location.href;
	if (HREF.includes(`lang=pl`)) {
		lang = 'PL';
	} else if (HREF.includes(`lang=eng`)) {
		lang = 'EN'
	} else if (HREF.includes(`licenses`)) {
		displayLicenseInfo();
	}
}

function displayLicenseInfo() {
	const installationContainer = document.querySelector('.powerManagementInstallationContainer');
	installationContainer.outerHTML = "";
	const licenseDiv = document.createElement('div');
	licenseDiv.className = 'licenseDiv';
	licenseDiv.setAttribute('id', 'licenseDiv');
	const mitLicenseInfo = document.createElement('p');
	mitLicenseInfo.className = `licenseIntro`;
	mitLicenseInfo.innerText = ` Grafiki objęte prawami autorskimi na następującej licencji MIT.`
	const mitLicenseText = document.createElement('article');
	mitLicenseText.className = `mitLicenseText`;
	mitLicenseText.innerText = `Copyright 2021 AtestGaz

	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
`;


	const licensedCopyImage = document.createElement('img');
	const licensedDeleteImage = document.createElement('img');
	licensedCopyImage.className = 'licensedCopyImage';
	licensedDeleteImage.className = 'licensedDeleteImage';
	licensedDeleteImage.src = `./Icons/delete.svg`;
	licensedCopyImage.src = `./Icons/copy.svg`;
	licenseDiv.appendChild(licensedCopyImage);
	licenseDiv.appendChild(licensedDeleteImage);
	licenseDiv.appendChild(mitLicenseInfo);
	licenseDiv.appendChild(mitLicenseText);
	document.body.appendChild(licenseDiv);
}

function chooseText(text) {
	let res;
	switch (lang) {
		case "PL": {
			res = text.pl;
			break;
		}
		case "EN": {
			res = text.en;
			break;
		}
	}
	return res;
}

chooseImg = (img, value, typeOfImage = '') => {
	switch (typeOfImage) {
		case "deviceImage": {
			const device = Devices.find(device => device.type === value);
			img.src = `./Gfx/${device.icon}`;
			img.alt = `Unable to find image`;
			break;
		}
		case "busImage": {
			img.src = `./Gfx/${value}.svg`;
			img.alt = `Unable to find image`;
			break;
		}
	}
}



